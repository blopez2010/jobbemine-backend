type Query {
  getOpportunities(offset: Int! size: Int!): OpportunityResultPayload
  getOpportunitiesAggregators: AggregatorsPayload
  getPeople(offset: Int! size: Int!): PeopleResultPayload
  getOpportunityById(id: String!): OpportunityPayload
  getBioByUsername(username: String!): BiosPayload
}

type OpportunityResultPayload implements IPayloadBase {
  offset: Int
  results: [OpportunityResultInput!]!
  size: Int
  total: Int
}

type OpportunityPayload {
  id: String!
  attachments: [AttachmentInput!]
  boardVersion: Int!
  prefilledStatus: PrefilledStatusInput
  locale: String!
  objective: String!
  timeframe: TimeFrameInput
  stats: StatsInput
  review: String
  draft: String
  members: [MemberInput!]
  details: [DetailInput!]
  place: PlaceInput
  deadline: String
  slug: String
  serpTags: SerpTagsInput
  owners: MemberInput!
  completion: Int
  languages: [LanguageDataInput!]
  created: String!
  crawled: Boolean!
  opportunity: String!
  active: Boolean!
  externalId: String
  commitment: CommitmentInput
  stableOn: String
  timezones: [String]
  strengths: [StrengthsInput]
  organizations: [OrganizationInput]
  compensation: CompensationInput
  openGraph: String
  status: String!
}

type PeopleResultPayload implements IPayloadBase {
  offset: Int
  results: [PeopleInput!]!
  size: Int
  total: Int
}

type BiosPayload {
  person: PersonDataBiosInput
  stats: [StatsDataBiosInput]
  strengths: [StrengthsDataBiosInput]
  interests: [InterestsDataBiosInput]
  experiences: [ExperienceDataBiosInput]
  awards: [AwardDataBiosInput]
  jobs: [JobDataBiosInput]
  education: [EducationDataBiosInput]
  opportunities: [OpportunityDataBiosInput]
  languages: [LanguageDataInput]
  personalityTraitsResults: [PersonalityTraitResult]
  professionalCultureGenomeResults: [ProfessionalCultureGenomeResult]
}

type AggregatorsPayload implements IPayloadBase {
  aggregators: AggregatorsInput
  offset: Int
  size: Int
  total: Int
}

type AggregatorsInput {
  remote: [AggregateRemoteInput]
  organization: [AggregateOrganizationInput]
  skill: [AggregateSkillInput]
  compensationrange: [AggregateCompensationRangeInput]
  type: [AggregateTypeInput]
  status: [AggregateStatusInput]
}

type AggregateRemoteInput implements IAggregateBase {
  total: Int!
  value: String!
}

type AggregateOrganizationInput implements IAggregateBase {
  total: Int!
  value: String!
}

type AggregateSkillInput implements IAggregateBase {
  total: Int!
  value: String!
}

type AggregateCompensationRangeInput implements IAggregateBase {
  total: Int!
  value: String!
}

type AggregateTypeInput implements IAggregateBase {
  total: Int!
  value: String!
}

type AggregateStatusInput implements IAggregateBase {
  total: Int!
  value: String!
}

type PeopleInput {
  context: [ContextInput]
  _meta: PeopleMetaInput
  compensations: PeopleCompensationInput
  locationName: String!
  name: String!
  openTo: [String]
  picture: String
  professionalHeadline: String!
  remoter: Boolean!
  skills: [SkillInput]
  subjectId: String!
  username: String!
  verified: Boolean!
  weight: Float
}

type OpportunityResultInput {
  id: String!
  objective: String!
  type: String!
  organizations: [OrganizationInput!]
  locations: [String!]
  remote: Boolean!
  external: Boolean!
  deadline: String!
  status: String!
  compensation: CompensationDataInput!
  skills: [SkillInput!]
  members: [MemberInput!]
  questions: [QuestionInput!]
  context: [ContextInput]
  _meta: Meta!
}

type ContextInput {
  signaled: [String]
}

type CompensationDataInput {
  data: CompensationInput!
  visible: Boolean!
}

type PeopleCompensationInput {
  freelancer: CompensationInput
  employees: CompensationInput
}

type CompensationInput {
  code: String
  currency: String!
  estimate: Boolean
  minAmount: Float
  maxAmount: Float
  periodicity: String!
  amount: Float
  visible: Boolean
}

type OrganizationInput {
  id: Int!
  name: String!
  size: Int
  picture: String!
}

type SkillInput {
  name: String!
  experience: String
  weight: Float
}

type MemberInput {
  subjectId: String!
  name: String!
  username: String!
  professionalHeadline: String!
  picture: String!
  member: Boolean!
  manager: Boolean!
  posters: Boolean!
  weight: Float!
}

type QuestionInput {
  id: String!
  text: String!
  date: String!
}

type Meta {
  rank: Float!
  scorer: ScorerInput
  filter: String
  boosters: [String]
}

type PeopleMetaInput {
  rank: Float!
  score: Float
  And: PeopleAndInput
}

type ScorerInput {
  score: Float!
  and: AndInput
}

type AndInput {
  id: String
  input: Input
}

type PeopleAndInput {
  rank: Float
  scorer: String
  score: Float
  input: Input
}

type Input {
  criteria: String
  opportunity: OpportunityInput
  person: PersonInput
}

type PersonInput {
  weight: Float!
}

type OpportunityInput {
  completion: Float
}

type AttachmentInput {
  resource: String!
  address: String!
  path: String!
  caption: String
}

type PrefilledStatusInput {
  status: String!
}

type TimeFrameInput {
  type: String!
}

type StatsInput {
  finishedApplications: Int
}

type MemberInput {
  id: String!
  person: MemberInput
  manager: Boolean!
  poster: Boolean!
  member: Boolean!
  status: String
  visible: Boolean!
  screeningQuestionsTipClosed: Boolean!
}

type PersonInput {
  id: String!
  username: String!
  name: String!
  hasEmail: Boolean!
  professionalHeadline: String!
  picture: String
  pictureThumbnail: String
  hasBio: Boolean!
  bioCompletion: Int
  weight: Int
  verified: Boolean!
  subjectId: Int
}

type PersonDataBiosInput {
  id: String!
  professionalHeadline: String!
  completion: Int
  showPhone: Boolean!
  verified: Boolean!
  flags: FlagsInput!
  weight: Int
  locale: String!
  subjectId: Int
  picture: String
  hasEmail: Boolean!
  isTest: Boolean!
  name: String!
  links: [LinkInput]
  location: LocationInput
  theme: String
  pictureThumbnail: String
  claimant: Boolean!
  summaryOfBio: String
  weightGraph: String
  publicId: String!
  created: String!
}

type StatsDataBiosInput {
  strengths: Int
  awards: Int
  education: Int
  interests: Int
  jobs: Int
}

type StrengthsDataBiosInput {
  id: String!
  code: Int!
  name: String!
  weight: Int
  recommendations: Int 
  created: String!
}

type InterestsDataBiosInput {
  id: String!
  code: Int
  name: String!
  created: String!
}

interface IBiosBasicInput {
  id: String!
  category: String!
  name: String!
  organizations: [OrganizationInput]
  responsibilities: [String]
  fromMonth: String
  fromYear: String
  toMonth: String
  toYear: String
  highlighted: Boolean!
  weight: Int
  verifications: Int
  recommendations: Int
  rank: Int!
}

type ExperienceDataBiosInput implements IBiosBasicInput {
  id: String!
  category: String!
  name: String!
  organizations: [OrganizationInput]
  responsibilities: [String]
  fromMonth: String
  fromYear: String
  toMonth: String
  toYear: String
  highlighted: Boolean!
  weight: Int
  verifications: Int
  recommendations: Int
  rank: Int!
}

type AwardDataBiosInput implements IBiosBasicInput {
  id: String!
  category: String!
  name: String!
  organizations: [OrganizationInput]
  responsibilities: [String]
  fromMonth: String
  fromYear: String
  toMonth: String
  toYear: String
  highlighted: Boolean!
  weight: Int
  verifications: Int
  recommendations: Int
  rank: Int!
}

type JobDataBiosInput implements IBiosBasicInput {
  id: String!
  category: String!
  name: String!
  organizations: [OrganizationInput]
  responsibilities: [String]
  fromMonth: String
  fromYear: String
  toMonth: String
  toYear: String
  highlighted: Boolean!
  weight: Int
  verifications: Int
  recommendations: Int
  rank: Int!
  additionalInfo: String
  remote: Boolean
}

type EducationDataBiosInput implements IBiosBasicInput {
  id: String!
  category: String!
  name: String!
  organizations: [OrganizationInput]
  responsibilities: [String]
  fromMonth: String
  fromYear: String
  toMonth: String
  toYear: String
  highlighted: Boolean!
  weight: Int
  verifications: Int
  recommendations: Int
  rank: Int!
  additionalInfo: String
  remote: Boolean
}

type LinkInput {
  id: String!
  name: String!
  address: String!
}

type FlagsInput {
  benefits: Boolean!
  canary: Boolean!
  enlauSource: Boolean!
  fake: Boolean!
  featureDiscovery: Boolean!
  getSignaledBenefitsViewed: Boolean!
  firstSignalSent: Boolean!
  promoteYourselfBenefitsViewed: Boolean!
  promoteYourselfCompleted: Boolean!
  importingLinkedin: Boolean!
  onBoarded: Boolean!
  remoter: Boolean!
  signalsFeatureDiscovery: Boolean!
  signedInToOpportunities: Boolean!
  importingLinkedinRecommendations: Boolean!
  contactsImported: Boolean!
  appContactsImported: Boolean!
  genomeCompletionAcknowledged: Boolean!
}

type LocationInput {
  name: String!
  shortName: String!
  country: String!
  latitude: Float
  longitude: Float
  timezone: String!
  timezoneOffSet: Int!
}

type OpportunityDataBiosInput {
  id: String!
  interest: String!
  field: String!
}

type OpportunityDepartmentDataBiosInput {
  code: Int!
  locale: String!
  name: String!
}

type PersonalityTraitResult {
  groups: [PersonalityTraitGroup]
  analyses: [Analysis]
}

type ProfessionalCultureGenomeResult {
  groups: [professionalCultureGenomeGroup]
  analyses: [Analysis]
}

type PersonalityTraitGroup {
  id: String!
  order: Int
  median: Float
  stddev: Float
}

type professionalCultureGenomeGroup {
  id: String!
  text: String!
  answer: String
  order: Int
}

type Analysis {
  groupId: String!
  section: String
  analysis: Float
}

type DetailInput {
  code: String!
  content: String!
}

type PlaceInput {
  remote: Boolean!
  anywhere: Boolean!
  timezone: Boolean!
  location: [String]
}

type SerpTagsInput {
  title: String!
  description: String!
  identifier: IdentifierInput
  datePosted: String
  employmentType: [String]
  validThrough: String
  HiringOrganizationType: HiringOrganizationTypeInput
  jobLocationType: String!
  applicantLocationRequirements: [ApplicantLocationRequirementInput]
  baseSalary: BaseSalaryInput
}

type BaseSalaryInput {
  currency: String!
  value: ValueInput
}

type ValueInput {
  minValue: Int
  maxValue: Int
  unitText: String!
}

type ApplicantLocationRequirementInput {
  name: String!
}

type HiringOrganizationTypeInput {
  name: String!
  logo: String!
}

type IdentifierInput {
  name: String!
  value: String!
}

type LanguageDataInput {
  code: String
  language: LanguageInput!
  fluency: String!
}

type LanguageInput {
  code: String!
  name: String!
}

type CommitmentInput {
  code: String!
  hours: Int
}

type StrengthsInput {
  id: String!
  code: Int!
  name: String!
  experience: String!
}

interface IPayloadBase {
  offset: Int
  size: Int
  total: Int
}

interface IAggregateBase {
  total: Int!
  value: String!
}